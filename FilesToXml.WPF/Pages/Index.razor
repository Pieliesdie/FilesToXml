@page "/"
@using FileInfo = System.IO.FileInfo
@using Size = MudBlazor.Size
@using FilesToXml.Core
@using FilesToXml.WPF.Helpers
@using FilesToXml.WPF.Model
@using System.Text
@using Microsoft.Win32
@using System.IO
@using FilesToXml.Core.Extensions
@using FilesToXml.WPF.Components.MudConsole
@inject ISnackbar Snackbar

<div>
    <MudButton HtmlTag="label"
               Variant="Variant.Filled"
               Color="Color.Primary"
               Style="height: 50px;width: 100%"
               StartIcon="@Icons.Material.Filled.CloudUpload"
               OnClick="UploadFiles">
        Select source file
    </MudButton>
    <MudDataGrid Items="@ConvertOptions.Input" Class="mt-5" Dense="false">
        <Columns>
            <HierarchyColumn T="FileUpload"/>
            <PropertyColumn Property="x => x.Name" Title="Name"/>
            <PropertyColumn Property="x => x.Path" Title="Path"/>
            <PropertyColumn Property="x => x.SizeInKb" Title="Size(kb)"/>
            <PropertyColumn Property="x => x.Extension" Title="Extension"/>
            <TemplateColumn StickyRight="true" Sortable="false">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" Color="Color.Error" OnClick="() => RemoveUpload(context.Item)"/>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudStack Row="false" Spacing="1" AlignItems="AlignItems.Stretch">
                <MudText Typo="Typo.body2">Input encoding</MudText>
                <MudSelectExtended SearchBox="true" ItemCollection="encodingInfo" @bind-Value="@context.Item.Encoding"
                                   T="Encoding" ToStringFunc="@EncodingTools.EncodingToFriendlyString"/>
                <MudText Typo="Typo.body2">Dataset label</MudText>
                <MudTextField T="string" @bind-Value="@context.Item.Label" Variant="Variant.Text" Clearable="true"></MudTextField>
                @if (context.Item.Extension == "csv")
                {
                    <MudText Typo="Typo.body2">Csv delimiter</MudText>
                    <MudTextField T="string" @bind-Value="@context.Item.Delimiter" Variant="Variant.Text"></MudTextField>
                }
            </MudStack>
        </ChildRowContent>
    </MudDataGrid>
    <MudExpansionPanels Class="mt-5">
        <MudExpansionPanel Text="Settings">
            <MudStack>
                <MudCheckBox @bind-Checked="@ConvertOptions.DisableFormat">Disable output file formatting</MudCheckBox>
                <MudCheckBox @bind-Checked="@ConvertOptions.ForceSave">Override output file</MudCheckBox>
                <MudSelectExtended SearchBox="true" ItemCollection="encodingInfo" @bind-Value="ConvertOptions.OutputEncoding"
                                   T="Encoding" ToStringFunc="@EncodingTools.EncodingToFriendlyString"
                                   Label="Output Encoding"/>
            </MudStack>
        </MudExpansionPanel>
    </MudExpansionPanels>
    <MudStack Row="true" Class="mt-3" Style="max-height: 100px;" AlignItems="AlignItems.End">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Style="height: 50px;min-width: 160px"
                   StartIcon="@Icons.Material.Filled.Folder"
                   OnClick="SelectFolder">
            Select output file
        </MudButton>
        <MudTextField FullWidth="true" T="string" @bind-Value="@ConvertOptions.Output" Label="Output file" Clearable="true"/>
        <MudSpacer/>
        <MudButton @bind-Disabled="@IsBusy"
                   Variant="Variant.Filled"
                   Class="pa-5"
                   Style="height: 50px;min-width: 160px"
                   Color="Color.Info"
                   StartIcon="@Icons.Material.Filled.NotStarted"
                   OnClick="Convert">
            Start convertation
        </MudButton>
    </MudStack>

    <MudExpansionPanels Style="flex:auto" Class="mt-5 mb-5">
        <MudExpansionPanel Text="Logs">
            <MudConsole @ref="LogConsole" Style="overflow:auto;max-height: 300px" Changed="StateHasChanged"/>
            @if (LogConsole is {IsEmpty: false})
            {
                <MudStack Row="true" Class="mt-3" Style="max-height: 100px;" AlignItems="AlignItems.Center">
                    <MudCheckBox Class="mr-3" Style="height: 40px" @bind-Checked="@LogConsole.ScrollToBottomOnUpdate">Scroll to bottom on update</MudCheckBox>
                    <MudSpacer/>
                    <MudButton Style="width: 90px; height: 40px" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="CopyConsole">Copy</MudButton>
                    <MudButton Style="width: 90px; height: 40px" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="ClearConsole">Clear</MudButton>
                </MudStack>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
</div>

@code {
    private MudConsole? LogConsole { get; set; }
    private OptionsViewModel ConvertOptions { get; } = new();
    private bool IsBusy { get; set; } = false;
    private readonly Encoding[] encodingInfo = Encoding.GetEncodings().Select(x => x.GetEncoding()).ToArray();
    private void UploadFiles()
    {
        var ofd = new OpenFileDialog
        {
            Multiselect = true,
            Filter = "all files|*.*|" + Enum.GetNames(typeof(SupportedFileExt)).Select(x => $"{x} files|*.{x}").Aggregate((x, y) => $"{x}|{y}")
        };
        if (ofd.ShowDialog() != true) return;

        var result = ofd.FileNames;
        if (!result.Any()) return;

        foreach (var file in result)
        {
            if (file.GetExtFromPath() is null)
            {
                Snackbar.Add($"{file} not supported", Severity.Error);
                continue;
            }

            ConvertOptions.Input.Add(new FileUpload
            {
                Path = file,
                Name = Path.GetFileNameWithoutExtension(file),
                Size = new FileInfo(file).Length
            });
        }
    }
    private void RemoveUpload(FileUpload file)
    {
        ConvertOptions.Input.Remove(file);
    }
    private void SelectFolder()
    {
        var sfd = new SaveFileDialog
        {
            Filter = "XML File (*.xml)|*.xml"
        };
        if (sfd.ShowDialog() != true) return;
        ConvertOptions.Output = sfd.FileName;
    }
    private async Task CopyConsole()
    {
        if (LogConsole == null) return;
        await LogConsole.CopyToClipboard();
        Snackbar.Add("Copied to clipboard!", Severity.Success);
    }
    private async Task ClearConsole()
    {
        if (LogConsole == null) return;
        await LogConsole.Clear();
    }
    private async Task Convert()
    {
        if (LogConsole == null) return;
        try
        {
            IsBusy = true;
            if (!ConvertOptions.Input.Any())
            {
                Snackbar.Add($"Select files", Severity.Error);
                return;
            }

            await LogConsole.Clear();

            await using var resultStream = new LineStream(ConvertOptions.OutputEncoding);
            await using var errorStream = new LineStream(ConvertOptions.OutputEncoding);
            resultStream.OnWriteLines += async (lines) => await LogConsole.Write(lines);
            errorStream.OnWriteLines += async (lines) => await LogConsole.WriteToBegin(lines, Color.Error);
            if (string.IsNullOrWhiteSpace(ConvertOptions.Output))
            {
                Snackbar.Add($"Output folder is empty, print to logs", Severity.Warning);
            }

            var isConverted = await Task.Run(() => ConverterToXml.Convert(ConvertOptions.MapToOptions(), resultStream, errorStream));
            if (isConverted)
            {
                Snackbar.Add($"Converted to {ConvertOptions.Output ?? "logs"}", Severity.Success);
            }
            else
            {
                Snackbar.Add("Error", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            _ = LogConsole.WriteToBegin(ex.Message, Color.Error);
        }
        finally
        {
            IsBusy = false;
        }
    }
}