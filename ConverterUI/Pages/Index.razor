@page "/"
@using System.Collections.ObjectModel;
@using CommunityToolkit.Maui.Core.Primitives;
@using CommunityToolkit.Maui.Storage;
@using ConverterToXml;
@using System.Text;
@using System.Collections.Concurrent;
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime


<MudButton HtmlTag="label"
           Variant="Variant.Filled"
           Color="Color.Primary"
           StartIcon="@Icons.Material.Filled.CloudUpload"
           OnClick="() => UploadFiles()">
    Select source file
</MudButton>

<MudDataGrid Items="@ConvertOptions.Input" Class="mt-5" Dense=false>
    <Columns>
        <HierarchyColumn T="FileUpload" />
        <Column T="FileUpload" Field="FileName" Title="Name" />
        <Column T="FileUpload" Field="FilePath" Title="Path" />
        <Column T="FileUpload" Field="ContentType" Title="Type" />
        <Column T="FileUpload" Field="Extension" Title="Extension" />
        <Column T="FileUpload" StickyRight="true" Title="Buttons">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" Color="Color.Error" OnClick="() => RemoveUpload(context.Item)" />
            </CellTemplate>
        </Column>
    </Columns>
    <ChildRowContent>
        <MudStack Row=false Spacing="1">
            <MudText Typo="Typo.body2">Input encoding</MudText>
            <MudSelectExtended SearchBox="true" ItemCollection="encodingInfos" @bind-Value="@context.Item.InputEncoding"
                               T="Encoding" ToStringFunc="@(new Func<Encoding, string>(StringFunc))" />
            <MudText Typo="Typo.body2">Dataset label</MudText>
            <MudTextField T="string" @bind-Value="@context.Item.Label" Variant="Variant.Text"></MudTextField>
            @if (context.Item.Extension == "csv")
            {
                <MudText Typo="Typo.body2">Csv delimiter</MudText>
                <MudTextField T="string" @bind-Value="@context.Item.Delimiter" Variant="Variant.Text"></MudTextField>
            }
        </MudStack>
    </ChildRowContent>
</MudDataGrid>
<MudExpansionPanels Class="mt-5">
    <MudExpansionPanel Text="Settings">
        <MudStack>
            <MudCheckBox @bind-Checked="@ConvertOptions.DisableFormat">Disable output file formatting</MudCheckBox>
            <MudCheckBox @bind-Checked="@ConvertOptions.ForceSave">Override output file</MudCheckBox>
            <MudSelectExtended SearchBox="true" ItemCollection="encodingInfos" @bind-Value="ConvertOptions.OutputEncoding"
                               T="Encoding" ToStringFunc="@(new Func<Encoding, string>(StringFunc))"
                               Label="Output Encoding" />
        </MudStack>
    </MudExpansionPanel>
</MudExpansionPanels>
<MudStack Row=true Class="mt-5">
    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               StartIcon="@Icons.Material.Filled.Folder"
               OnClick="() => SelectFolder()">
        Select output folder
    </MudButton>
    <MudTextField T="string" @bind-Value=@ConvertOptions.Output Label="Output file" />
    <MudSpacer />
    <MudButton @bind-Disabled="@IsBusy"
               Variant="Variant.Filled"
               Color="Color.Info"
               StartIcon="@Icons.Material.Filled.NotStarted"
               OnClick="() => SaveResult()">
        Start convertation
    </MudButton>
</MudStack>
<MudExpansionPanels Style="flex:1" Class="mt-5">
    <MudExpansionPanel Text="Show logs">
        <MudContainer style="max-height:300px; overflow-y:scroll" MaxWidth="MaxWidth.False">
            <Virtualize Context="message" ItemsProvider="@GetRows" @ref="virtualizeComponent">
                <ItemContent>
                    <MudText Style="white-space:pre-wrap" Typo="@Typo.body2" Color="@message.clr">@message.msg</MudText>
                </ItemContent>
                <Placeholder>
                    <p>
                        Loading&hellip;
                    </p>
                </Placeholder>
            </Virtualize>
        </MudContainer>
        @if (_events.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>
@code {
    [Inject] IDialogService dialogService { get; set; }
    [Inject] IJSRuntime jSRuntime { get; set; }
    bool IsBusy { get; set; } = false;
    private Encoding[] encodingInfos = Encoding.GetEncodings().Select(x => x.GetEncoding()).ToArray();
    private string StringFunc(Encoding tuple)
    {
        if (tuple == null)
        {
            return null;
        }
        return tuple.EncodingName + " - Code page: " + tuple.CodePage;
    }

    private Virtualize<Event> virtualizeComponent;
    private record Event
    {
        public string msg { get; set; }
        public Color clr { get; set; }
    }
    private ConcurrentQueue<Event> _events = new();
    private ValueTask<ItemsProviderResult<Event>> GetRows(ItemsProviderRequest request)
    {
        return new(new ItemsProviderResult<Event>(
            _events.OfType<Event>().Skip(request.StartIndex).Take(request.Count), _events.Count));
    }

    private OptionsViewModel ConvertOptions { get; set; } = new();

    private async void UploadFiles()
    {
        var result = await FilePicker.Default.PickMultipleAsync();
        if (result is not null && result.Any())
        {
            foreach (var file in result)
            {
                if (file.FullPath.GetExtFromPath() is null)
                {
                    Snackbar.Add($"{file.FileName} not supported", Severity.Error);
                    continue;
                }
                ConvertOptions.Input.Add(new()
                    {
                        FilePath = file.FullPath,
                        FileName = file.FileName,
                        ContentType = file.ContentType
                    });
            }
            StateHasChanged();
        }
    }
    private void RemoveUpload(FileUpload file)
    {
        ConvertOptions.Input.Remove(file);
        StateHasChanged();
    }
    private async void SelectFolder()
    {
        try
        {
            var folder = await FolderPicker.Default.PickAsync(new CancellationToken());
            ConvertOptions.Output = Path.Combine(folder.Path, "result.xml");
            StateHasChanged();
        }
        catch { }
    }
    private async void SaveResult()
    {
        try
        {
            IsBusy = true;
            if (!ConvertOptions.Input.Any())
            {
                Snackbar.Add($"Select files", Severity.Error);
                return;
            }
            using var sw = new StringWriterExt();
            using var errorSw = new StringWriterExt();
            sw.Flushed += writer_OkFlushed;
            errorSw.Flushed += writer_ErrorFlushed;

            if (string.IsNullOrWhiteSpace(ConvertOptions.Output))
            {
                Snackbar.Add($"Output folder is empty, print to logs", Severity.Warning);
            }

            _events.Clear();
            await InvokeAsync(StateHasChanged);
            var isConverted = await Task.Run(() => ConverterToXml.Convert((MauiOptions)ConvertOptions, sw, errorSw));
            if (isConverted)
            {
                Snackbar.Add($"Converted to {ConvertOptions.Output ?? "logs"}", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Error", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            _events.Enqueue(new() { msg = ex.Message, clr = Color.Error });
        }
        finally
        {
            IsBusy = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    async void writer_ErrorFlushed(object sender, EventArgs args)
    {
        _events.Enqueue(new() { msg = sender.ToString(), clr = Color.Error });
        await InvokeAsync(async () =>
        {
            await virtualizeComponent?.RefreshDataAsync();
        });
    }

    async void writer_OkFlushed(object sender, EventArgs args)
    {
        var messages = sender.ToString().Split(Environment.NewLine).ToList();

        if (_events.Any())
        {
            var _event = _events.Last();
            _event.msg += messages.First();
            messages.Skip(1).ToList().ForEach(x => _events.Enqueue(new() { msg = x, clr = Color.Default }));
        }
        else
        {
            messages.ToList().ForEach(x => _events.Enqueue(new() { msg = x, clr = Color.Default }));
        }
        
        //_events.Enqueue(new() { msg = sender.ToString(), clr = Color.Default });
        await InvokeAsync(virtualizeComponent.RefreshDataAsync);
    }
}
