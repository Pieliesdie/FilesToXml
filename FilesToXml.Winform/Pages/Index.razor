@page "/"
@using System.Text;
@using System.Collections.Concurrent;
@using FilesToXml.Core
@using FilesToXml.Winform.Helpers
@using FilesToXml.Winform.Model
@inject ISnackbar Snackbar

<MudButton HtmlTag="label"
           Variant="Variant.Filled"
           Color="Color.Primary"
           StartIcon="@Icons.Material.Filled.CloudUpload"
           OnClick="() => UploadFiles()">
    Select source file
</MudButton>

<MudDataGrid Items="@ConvertOptions.Input" Class="mt-5" Dense="false">
    <Columns>
        <HierarchyColumn T="FileUpload" />
        <PropertyColumn Property="x => x.Name" Title="Name" />
        <PropertyColumn Property="x => x.Path" Title="Path" />
        <PropertyColumn Property="x => x.SizeInKb" Title="Size(kb)" />
        <PropertyColumn Property="x => x.Extension" Title="Extension" />
        <TemplateColumn StickyRight="true" Sortable="false">
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" Color="Color.Error" OnClick="() => RemoveUpload(context.Item)" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <ChildRowContent>
        <MudStack Row="false" Spacing="1">
            <MudText Typo="Typo.body2">Input encoding</MudText>
            <MudSelectExtended SearchBox="true" ItemCollection="encodingInfo" @bind-Value="@context.Item.Encoding"
                               T="Encoding" ToStringFunc="@(new Func<Encoding, string>(StringFunc))" />
            <MudText Typo="Typo.body2">Dataset label</MudText>
            <MudTextField T="string" @bind-Value="@context.Item.Label" Variant="Variant.Text"></MudTextField>
            @if (context.Item.Extension == "csv")
            {
                <MudText Typo="Typo.body2">Csv delimiter</MudText>
                <MudTextField T="string" @bind-Value="@context.Item.Delimiter" Variant="Variant.Text"></MudTextField>
            }
        </MudStack>
    </ChildRowContent>
</MudDataGrid>
<MudExpansionPanels Class="mt-5">
    <MudExpansionPanel Text="Settings">
        <MudStack>
            <MudCheckBox @bind-Checked="@ConvertOptions.DisableFormat">Disable output file formatting</MudCheckBox>
            <MudCheckBox @bind-Checked="@ConvertOptions.ForceSave">Override output file</MudCheckBox>
            <MudSelectExtended SearchBox="true" ItemCollection="encodingInfo" @bind-Value="ConvertOptions.OutputEncoding"
                               T="Encoding" ToStringFunc="@(new Func<Encoding, string>(StringFunc))"
                               Label="Output Encoding" />
        </MudStack>
    </MudExpansionPanel>
</MudExpansionPanels>
<MudStack Row=true Class="mt-5" Style="max-height: 100px;">
    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               StartIcon="@Icons.Material.Filled.Folder"
               OnClick="() => SelectFolder()">
        Select output file
    </MudButton>
    <MudTextField T="string" @bind-Value=@ConvertOptions.Output Label="Output file" />
    <MudSpacer />
    <MudButton @bind-Disabled="@IsBusy"
               Variant="Variant.Filled"
               Color="Color.Info"
               StartIcon="@Icons.Material.Filled.NotStarted"
               OnClick="() => SaveResult()">
        Start convertation
    </MudButton>
</MudStack>
<MudExpansionPanels Style="flex:1" Class="mt-5">
    <MudExpansionPanel Text="Show logs">
        <MudContainer style="max-height:300px; overflow-y:scroll" MaxWidth="MaxWidth.False">
            <Virtualize Context="message" ItemsProvider="@GetRows" @ref="virtualizeComponent">
                <ItemContent>
                    <MudText Style="white-space:pre-wrap" Typo="@Typo.body2" Color="@message.clr">@message.msg</MudText>
                </ItemContent>
                <Placeholder>
                    <p>
                        Loading&hellip;
                    </p>
                </Placeholder>
            </Virtualize>
        </MudContainer>
        @if (_events.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>
@code {
    [Inject] IDialogService DialogService { get; set; } = null!;
    [Inject] IJSRuntime JsRuntime { get; set; } = null!;
    bool IsBusy { get; set; } = false;
    private Encoding[] encodingInfo = Encoding.GetEncodings().Select(x => x.GetEncoding()).ToArray();
    private string StringFunc(Encoding? tuple)
    {
        if (tuple == null) return String.Empty;
        return tuple.EncodingName + " - Code page: " + tuple.CodePage;
    }

    private Virtualize<Event>? virtualizeComponent;
    private record Event
    {
        public string? msg { get; set; }
        public Color clr { get; set; }
    }
    private ConcurrentQueue<Event> _events = new();
    private ValueTask<ItemsProviderResult<Event>> GetRows(ItemsProviderRequest request)
    {
        return new(new ItemsProviderResult<Event>(
            _events.Skip(request.StartIndex).Take(request.Count), _events.Count));
    }

    private OptionsViewModel ConvertOptions { get; set; } = new();

    private void UploadFiles()
    {
        var ofd = new OpenFileDialog();
        ofd.Multiselect = true;
        ofd.Filter = "all files|*.*|" + Enum.GetNames(typeof(SupportedFileExt)).Select(x => $"{x} files|*.{x}").Aggregate((x, y) => $"{x}|{y}");

        if (ofd.ShowDialog() != System.Windows.Forms.DialogResult.OK) { return; }
        var result = ofd.FileNames;
        if (result is not null && result.Any())
        {
            foreach (var file in result)
            {
                if (file.GetExtFromPath() is null)
                {
                    Snackbar.Add($"{file} not supported", Severity.Error);
                    continue;
                }

                ConvertOptions.Input.Add(new()
                    {
                        Path = file,
                        Name = Path.GetFileNameWithoutExtension(file),
                        Size = new FileInfo(file).Length
                    });
            }
            StateHasChanged();
        }
    }
    private void RemoveUpload(FileUpload file)
    {
        ConvertOptions.Input.Remove(file);
        StateHasChanged();
    }
    private void SelectFolder()
    {
        try
        {
            var sfd = new SaveFileDialog();
            sfd.Filter = "XML File (*.xml)|*.xml";
            if (sfd.ShowDialog() != System.Windows.Forms.DialogResult.OK) { return; }

            ConvertOptions.Output = sfd.FileName;
            StateHasChanged();

        }
        catch { }
    }
    private async void SaveResult()
    {
        try
        {
            IsBusy = true;
            if (!ConvertOptions.Input.Any())
            {
                Snackbar.Add($"Select files", Severity.Error);
                return;
            }
            await using var sw = new StringWriterExt();
            await using var errorSw = new StringWriterExt();
            sw.Flushed += writer_OkFlushed;
            errorSw.Flushed += writer_ErrorFlushed;

            if (string.IsNullOrWhiteSpace(ConvertOptions.Output))
            {
                Snackbar.Add($"Output folder is empty, print to logs", Severity.Warning);
            }

            _events.Clear();
            await InvokeAsync(StateHasChanged);
            var isConverted = await Task.Run(() => ConverterToXml.Convert((ConverterOptions)ConvertOptions, sw, errorSw));
            if (isConverted)
            {
                Snackbar.Add($"Converted to {ConvertOptions.Output ?? "logs"}", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Error", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            _events.Enqueue(new() { msg = ex.Message, clr = Color.Error });
        }
        finally
        {
            IsBusy = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    async void writer_ErrorFlushed(object sender, EventArgs args)
    {
        _events.Enqueue(new() { msg = sender?.ToString() ?? string.Empty, clr = Color.Error });
        await InvokeAsync(async () =>
        {
            if (virtualizeComponent is null)
            {
                return;
            }
            await virtualizeComponent.RefreshDataAsync();
        });
    }

    async void writer_OkFlushed(object sender, EventArgs args)
    {
        var messages = sender?.ToString()?.Split(Environment.NewLine).ToList();
        if (messages is null)
        {
            return;
        }

        var _event = _events.LastOrDefault();
        if (_event is not null && _event.clr == Color.Default)
        {
            _event.msg += messages.First();
            messages.Skip(1).ToList().ForEach(x => _events.Enqueue(new() { msg = x, clr = Color.Default }));
        }
        else
        {
            messages.ToList().ForEach(x => _events.Enqueue(new() { msg = x, clr = Color.Default }));
        }
        if (virtualizeComponent != null)
            await InvokeAsync(virtualizeComponent.RefreshDataAsync);
    }
}
